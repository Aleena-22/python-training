You're a Python testing expert. Generate comprehensive unit test cases 
using the unittest module for the following Python class.

- Ensure tests cover normal usage, edge cases, and invalid inputs.
- Test each method individually.
- Use assertions to verify correctness.
- Do not test CLI or I/O code. Focus only on the logic layer.

Here is the class to test:

from employee import Employee

class EmployeeManager:
    def __init__(self):
        self.employees = []

    # add a new employee
    def add_employee(self, name, department, designation, gross_salary, tax, bonus):
        employee = Employee(name, department, designation, gross_salary, tax, bonus)
        self.employees.append(employee)
        return employee

    # view all the employees
    def get_all_employees(self):
        return self.employees

    # search an employee by its unique id
    def search_by_employee_id(self, employee_id):
        return next((e for e in self.employees if e.id == employee_id), None)

    # deleting an employee
    def delete_employee(self, employee_id):
        employee = self.search_by_employee_id(employee_id)
        if employee:
            self.employees.remove(employee)
            return True
        return False

    def load_employees(self, employee_dicts):
        self.employees = [Employee.from_dict(d) for d in employee_dicts]

    def to_dict_list(self):
        return [e.to_dict() for e in self.employees]



Now generate a complete file of unit tests.
